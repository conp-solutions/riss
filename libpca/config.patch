--- libpca/armadillo/src/armadillo/include/armadillo_bits/config.hpp	2015-04-10 07:54:47.000000000 +0200
+++ libpca/armadillo/src/armadillo/include/armadillo_bits/config-new.hpp	2015-07-30 10:18:54.573908275 +0200
@@ -9,14 +9,14 @@
 
 
 #if !defined(ARMA_USE_LAPACK)
-#define ARMA_USE_LAPACK
+// #define ARMA_USE_LAPACK
 //// Comment out the above line if you don't have LAPACK or a high-speed replacement for LAPACK,
 //// such as Intel MKL, AMD ACML, or the Accelerate framework.
 //// LAPACK is required for matrix decompositions (eg. SVD) and matrix inverse.
 #endif
 
 #if !defined(ARMA_USE_BLAS)
-#define ARMA_USE_BLAS
+// #define ARMA_USE_BLAS
 //// Comment out the above line if you don't have BLAS or a high-speed replacement for BLAS,
 //// such as OpenBLAS, GotoBLAS, Intel MKL, AMD ACML, or the Accelerate framework.
 //// BLAS is used for matrix multiplication.
@@ -30,14 +30,14 @@
 #endif
 
 #if !defined(ARMA_USE_SUPERLU)
-// #define ARMA_USE_SUPERLU
+/* #undef ARMA_USE_SUPERLU */
 //// Uncomment the above line if you have SuperLU.
 //// SuperLU is used for solving sparse linear systems via spsolve()
 //// Caveat: only SuperLU version 4.3 can be used!
 #endif
 
 #if !defined(ARMA_SUPERLU_INCLUDE_DIR)
-// #define ARMA_SUPERLU_INCLUDE_DIR /usr/include/
+#define ARMA_SUPERLU_INCLUDE_DIR /
 //// If you're using SuperLU and want to explicitly include the SuperLU headers,
 //// uncomment the above define and specify the appropriate include directory.
 //// Make sure the directory has a trailing /
@@ -67,8 +67,8 @@
 // #define ARMA_USE_MKL_ALLOC
 //// Uncomment the above line if you want to use Intel MKL mkl_malloc() and mkl_free() instead of standard malloc() and free()
 
-// #define ARMA_USE_ATLAS
-// #define ARMA_ATLAS_INCLUDE_DIR /usr/include/
+/* #undef ARMA_USE_ATLAS */
+#define ARMA_ATLAS_INCLUDE_DIR /
 //// If you're using ATLAS and the compiler can't find cblas.h and/or clapack.h
 //// uncomment the above define and specify the appropriate include directory.
 //// Make sure the directory has a trailing /
@@ -76,14 +76,14 @@
 #if !defined(ARMA_USE_CXX11)
 // #define ARMA_USE_CXX11
 //// Uncomment the above line to forcefully enable use of C++11 features (eg. initialiser lists).
-//// Note that ARMA_USE_CXX11 is automatically enabled when a C++11 compiler is detected.
+//// Note that ARMA_USE_CXX11 is automatically enabled when a C++11 compiler is detected
 #endif
 
 #if !defined(ARMA_64BIT_WORD)
 // #define ARMA_64BIT_WORD
 //// Uncomment the above line if you require matrices/vectors capable of holding more than 4 billion elements.
-//// Your machine and compiler must have support for 64 bit integers (eg. via "long" or "long long").
-//// Note that ARMA_64BIT_WORD is automatically enabled when a C++11 compiler is detected.
+//// Your machine and compiler must have support for 64 bit integers (eg. via "long" or "long long")
+//// Note that ARMA_64BIT_WORD is automatically enabled when a C++11 compiler is detected
 #endif
 
 #if !defined(ARMA_USE_HDF5)
@@ -93,12 +93,12 @@
 //// and you will need to link with the hdf5 library (eg. -lhdf5)
 #endif
 
-// #define ARMA_USE_HDF5_ALT
+/* #undef ARMA_USE_HDF5_ALT */
 #if defined(ARMA_USE_HDF5_ALT) && defined(ARMA_USE_WRAPPER)
   #undef  ARMA_USE_HDF5
   #define ARMA_USE_HDF5
   
-  // #define ARMA_HDF5_INCLUDE_DIR /usr/include/
+  #define ARMA_HDF5_INCLUDE_DIR /
 #endif
 
 #if !defined(ARMA_MAT_PREALLOC)
@@ -176,7 +176,7 @@
 #if defined(ARMA_USE_WRAPPER)
   #if defined(ARMA_USE_CXX11)
     #if !defined(ARMA_USE_EXTERN_CXX11_RNG)
-      // #define ARMA_USE_EXTERN_CXX11_RNG
+      #define ARMA_USE_EXTERN_CXX11_RNG
     #endif
   #endif
 #endif
