# Project definitions:
# 
project(coprocessor)
version("3.0.0")


# Dependencies:
# 


# Libraries:
# 
set(LIB_SOURCES
    BoundedVariableElimination.cc
    BoundedVariableEliminationParallel.cc
    Bva.cc
    CP3Config.cc
    Circuit.cc
    ClauseElimination.cc
    Coprocessor.cc
    Dense.cc
    Entailed.cc
    EquivalenceElimination.cc
    Experimental.cc
    FourierMotzkin.cc
    HiddenTautologyElimination.cc
    LiteralAddition.cc
    OutputFormula.cc
    Probing.cc
    Propagation.cc
    Resolving.cc
    Rewriter.cc
    Shuffler.cc
    Subsumption.cc
    Symmetry.cc
    TwoSAT.cc
    Unhiding.cc
    # special case - this is an autogenerated file and we want it
    # not to be stored inside the other sources. That is why we
    # add the absolute path here
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/version.cc
    bce.cc
    libcoprocessorc.cc
    rate.cc
    sls.cc
    xor.cc)

# Custom version target that is always built, because it DEPENDS on a file (string)
# that does not exist
add_custom_target(${PROJECT_NAME}-version ALL
                  # build_version_file is nothing more than a unique string
                  DEPENDS ${PROJECT_NAME}-build_version_file)

# Tell CMake how to build the "build_version_file" on which the target "version"
# depends on. On this way we will also create the version.cc file
add_custom_command(OUTPUT ${PROJECT_NAME}-build_version_file ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/version.cc
                   COMMENT "Build version file for ${PROJECT_NAME}"
                   COMMAND ${CMAKE_COMMAND} -D VERSION=${VERSION}
                                            -D PROJECT_NAME=${PROJECT_NAME}
                                            -P ${CMAKE_CURRENT_SOURCE_DIR}/version.cmake)

# Create a symlink to the binary as shortcut
add_custom_command(TARGET  ${PROJECT_NAME}-core POST_BUILD
                   COMMAND ${CMAKE_COMMAND} -E create_symlink ${PROJECT_NAME}-core ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_NAME})
add_custom_command(TARGET  ${PROJECT_NAME}-simp POST_BUILD
                   COMMAND ${CMAKE_COMMAND} -E create_symlink ${PROJECT_NAME}-simp ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_NAME})


add_library(${PROJECT_NAME}-lib-static STATIC ${LIB_SOURCES})
add_library(${PROJECT_NAME}-lib-shared SHARED ${LIB_SOURCES})

set_target_properties(${PROJECT_NAME}-lib-static PROPERTIES
                                                 OUTPUT_NAME "${PROJECT_NAME}")
set_target_properties(${PROJECT_NAME}-lib-shared PROPERTIES
                                                 OUTPUT_NAME "${PROJECT_NAME}" 
                                                 VERSION ${VERSION}
                                                 SOVERSION ${SOVERSION})

# Executables:
# 
add_executable(${PROJECT_NAME} Main.cc)

if(STATIC_BINARIES)
  target_link_libraries(${PROJECT_NAME} riss-lib-static ${PROJECT_NAME}-lib-static)
else()
  target_link_libraries(${PROJECT_NAME} riss-lib-shared ${PROJECT_NAME}-lib-shared)
endif()

# Installation:
# 
install(TARGETS ${PROJECT_NAME}-lib-static ${PROJECT_NAME}-lib-shared ${PROJECT_NAME}
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)

install(DIRECTORY ${PROJECT_NAME}
        DESTINATION include/${PROJECT_NAME}
        FILES_MATCHING PATTERN "*.h")
