# Norbert Manthey, February 2014
#
# Parameter specification file for the SAT solver riss (version 4.00)
#
#
#


#
#
#    SSS  III M   M PPPP  L    III FFFF III  CCC  AA  TTTTTT III  OOO  N   N 
#   S      I  MM MM P   P L     I  F     I  C    A  A   TT    I  O   O NN  N 
#    SSS   I  M M M PPPP  L     I  FFF   I  C    AAAA   TT    I  O   O N N N 
#       S  I  M   M P     L     I  F     I  C    A  A   TT    I  O   O N  NN 
#   SSSS  III M   M P     LLLL III F    III  CCC A  A   TT   III  OOO  N   N 
#
#


#
#  COPROCESSOR 3 OPTIONS:
#
inc-inp  {yes,no}[no]       # increase technique limits per inprocess step
randInp  {yes,no}[yes]       # Randomize Inprocessing
inprocess  {yes,no}[no]       # Use CP3 for inprocessing
enabled_cp3  {yes,no}[no]       # Use CP3
cp3_randomized  {yes,no}[no]       # Steps withing preprocessing techniques are executed in random order
cp3_limited  {yes,no}[yes]       # Limits for preprocessing techniques

cp3_inp_cons  {0,20000,200000,500000,1000000}[500000]       # Perform Inprocessing after at least X conflicts
cp3_iters  {1,2,3,4}[1]       # simplification rounds in preprocessing

cp3_vars  {0,1000000,2000000,5000000}[5000000]       # variable limit to enable CP3
cp3_cls  {0,2000000,4000000,6000000,30000000}[30000000]       # clause limit to enable CP3
cp3_ipvars  {0,1000000,2000000,5000000}[5000000]       # variable limit to enable CP3 inprocessing
cp3_ipcls  {0,2000000,4000000,6000000,30000000}[30000000]       # clause limit to enable CP3 inprocessing

#
#  PREPROCESSOR TECHNIQUES OPTIONS:
#
ee  {yes,no}[no]       # Use Equivalence Elimination during preprocessing
rate  {yes,no}[no]       # Use resolution asymmetric tautologye limination during preprocessing
cce  {yes,no}[no]       # Use (covered) Clause Elimination during preprocessing
bce  {yes,no}[no]       # Use Blocked Clause Elimination during preprocessing
hte  {yes,no}[no]       # Use Hidden Tautology Elimination during preprocessing
subsimp  {yes,no}[no]       # Use Subsumption during preprocessing
up  {yes,no}[no]       # Use Unit Propagation during preprocessing
sls  {yes,no}[no]       # Use Simple Walksat algorithm to test whether formula is satisfiable quickly
xor  {yes,no}[no]       # Reason with XOR constraints
fm  {yes,no}[no]       # Use the Fourier Motzkin transformation
symm  {yes,no}[no]       # Do local symmetry breaking
dense  {yes,no}[no]       # Remove gaps in variables of the formula
3resolve  {yes,no}[no]       # Use Ternary Clause Resolution
probe  {yes,no}[no]       # Use Probing/Clause Vivification
unhide  {yes,no}[no]       # Use Unhiding (UHTE, UHLE based on BIG sampling)
bva  {yes,no}[no]       # Use Bounded Variable Addition during preprocessing
bve  {yes,no}[no]       # Use Bounded Variable Elimination during preprocessing

sls-flips  {-1,800000,8000000}[8000000]       # Perform given number of SLS flips

cp3_ptechs  {"","u3sghpvwc","u3svghpwc","u3svghpwcv"}[""]       # techniques for preprocessing
cp3_itechs  {"","us","usv","usw","ug","up","ux","uf","usxf","ugsxf"}[""]       # techniques for inprocessing

cp3_ee_vars  {0,1000000,2000000,5000000}[5000000]       # variable limit to enable CP3
cp3_ee_cls  {0,2000000,4000000,6000000,20000000}[20000000]       # clause limit to enable CP3
cp3_bve_vars  {0,1000000,2000000,5000000}[5000000]       # variable limit to enable CP3
cp3_bve_cls  {0,2000000,4000000,6000000,20000000}[20000000]       # clause limit to enable CP3
cp3_bva_vars  {0,1000000,2000000,3000000}[3000000]       # variable limit to enable CP3
cp3_bva_cls  {0,2000000,4000000,6000000,20000000}[20000000]       # clause limit to enable CP3
cp3_Ibva_vars  {0,1000000,2000000}[1000000]       # variable limit to enable CP3
cp3_Ibva_cls{0,2000000,4000000,6000000,10000000}[10000000]       # clause limit to enable CP3
cp3_Xbva_vars  {0,1000000,2000000}[1000000]       # variable limit to enable CP3
cp3_Xbva_cls{0,2000000,4000000,6000000,5000000}[5000000]       # clause limit to enable CP3
cp3_unhide_vars  {0,1000000,2000000,3000000}[3000000]       # variable limit to enable CP3
cp3_unhide_cls  {0,2000000,4000000,6000000,10000000}[10000000]       # clause limit to enable CP3
cp3_probe_vars  {0,1000000,2000000,3000000}[3000000]       # variable limit to enable CP3
cp3_probe_cls  {0,2000000,4000000,6000000,3000000}[3000000]       # clause limit to enable CP3
cp3_viv_vars   {0,1000000,2000000,5000000}[5000000]       # variable limit to enable CP3
cp3_viv_cls    {0,2000000,4000000,6000000,10000000}[10000000]       # clause limit to enable CP3
cp3_tRes_vars  {0,1000000,2000000}[1000000]       # variable limit to enable CP3
cp3_tRes_cls  {0,2000000,4000000,6000000,20000000}[20000000]       # clause limit to enable CP3
cp3_xor_cls  {0,2000000,4000000,6000000,3000000}[3000000]       # clause limit to enable CP3
cp3_xor_vars  {0,1000000,2000000,700000}[700000]       # variable limit to enable CP3
cp3_symm_vars  {0,1000000,2000000,3000000}[3000000]       # variable limit to enable CP3
cp3_symm_cls  {0,2000000,4000000,6000000,2147483647}[2147483647]       # clause limit to enable CP3
cp3_fm_vars  {0,1000000,2000000}[2000000]       # variable limit to enable CP3
cp3_fm_cls  {0,2000000,4000000,6000000,10000000}[10000000]       # clause limit to enable CP3
cp3_susi_vars  {0,1000000,2000000,5000000}[5000000]       # variable limit to enable CP3
cp3_susi_cls  {0,2000000,4000000,6000000,5000000}[5000000]       # clause limit to enable CP3
cp3_hte_vars  {0,1000000,2000000}[1000000]       # variable limit to enable CP3
cp3_hte_cls  {0,2000000,4000000,6000000,2147483647}[2147483647]       # clause limit to enable CP3
cp3_bce_vars  {0,1000000,2000000,3000000}[3000000]       # variable limit to enable CP3
cp3_bce_cls  {0,2000000,4000000,6000000,10000000}[10000000]       # clause limit to enable CP3
cp3_cce_vars  {0,1000000,2000000,5000000}[5000000]       # variable limit to enable CP3
cp3_cce_cls  {0,2000000,4000000,6000000,30000000}[30000000]       # clause limit to enable CP3
cp3_rate_vars  {0,1000000,2000000}[1000000]       # variable limit to enable CP3
cp3_rate_cls  {0,2000000,4000000,6000000}[2000000]       # clause limit to enable CP3
cp3_sls_vars  {0,1000000,2000000,500000}[500000]       # variable limit to enable CP3
cp3_sls_cls  {0,2000000,4000000,6000000,500000}[500000]       # clause limit to enable CP3

cp3_susi_lits {0,1000000,5000000,10000000}[10000000]       # total literals limit to enable
cp3_hte_lits {0,1000000,5000000,20000000}[20000000]       # total literals limit to enable
cp3_bce_lits {0,1000000,5000000,30000000}[30000000]       # total literals limit to enable
cp3_cce_lits {0,1000000,5000000,50000000}[50000000]       # total literals limit to enable
cp3_rate_lits {0,1000000,5000000,10000000}[10000000]       # total literals limit to enable
cp3_ee_lits {0,1000000,5000000,40000000}[40000000]       # total literals limit to enable
cp3_bve_lits {0,1000000,5000000,50000000}[50000000]       # total literals limit to enable
cp3_bva_lits {0,1000000,5000000,40000000}[40000000]       # total literals limit to enable
cp3_Ibva_lits {0,1000000,5000000,40000000}[40000000]       # total literals limit to enable
cp3_Xbva_lits {0,1000000,5000000,10000000}[10000000]       # total literals limit to enable
cp3_unhide_lits {0,1000000,5000000,7000000}[7000000]       # total literals limit to enable
cp3_probe_lits {0,1000000,5000000,30000000}[30000000]       # total literals limit to enable
cp3_viv_lits {0,1000000,5000000,15000000}[15000000]       # total literals limit to enable
cp3_tRes_lits {0,1000000,5000000,50000000}[50000000]       # total literals limit to enable
cp3_symm_lits {0,1000000,5000000,15000000}[15000000]       # total literals limit to enable
cp3_fm_lits {0,1000000,5000000,20000000}[20000000]       # total literals limit to enable
cp3_xor_lits {0,1000000,5000000}[5000000]       # total literals limit to enable
cp3_sls_lits {0,1000000,5000000,4000000}[4000000]       # total literals limit to enable

#
#  COPROCESSOR 3 - BCE OPTIONS:
#
bce-compl  {yes,no}[yes]       # test literals for BCE based on the number of occurrences of the complementary literal
bce-bin  {yes,no}[no]       # allow to remove binary clauses during BCE
bce-bce  {yes,no}[yes]       # actually perform BCE
bce-cle  {yes,no}[no]       # perform covered literal elimination (CLE)
bce-cla  {yes,no}[no]       # perform covered literal elimination (CLA)
bce-cle-cons  {yes,no}[no]       # conservative cle if taut. resolvents are present
bce-limit  {0,10000000,100000000,200000000}[100000000]       # number of pairwise clause comparisons before interrupting BCE
bce-incInp  {10000,100000,300000}[100000]       # number of steps given to BCE for another inprocessign round

#
#  COPROCESSOR 3 - BVA OPTIONS:
#
cp3_Abva  {yes,no}[yes]       # perform AND-bva
cp3_bva_subOr  {yes,no}[no]       # try to also substitus disjunctions
cp3_bva_incInp{200,2000,20000,80000}[80000]       # increases of number of steps per inprocessing
cp3_bva_limit  {120000,1200000,12000000}[1200000]       # number of steps allowed for AND-BVA
cp3_bva_Vlimit  {1000000,3000000,5000000}[3000000]       # use BVA only, if number of variables is below threshold
cp3_bva_Xlimit  {0,1000000,100000000}[100000000]       # number of steps allowed for XOR-BVA
cp3_bva_Ilimit  {0,1000000,100000000}[100000000]       # number of steps allowed for ITE-BVA
cp3_Xbva  {0,2}[0]       # perform XOR-bva (1=half gates,2=full gates)
cp3_Ibva  {0,2}[0]       # perform ITE-bva (1=half gates,2=full gates)

#
#  COPROCESSOR 3 - BVE OPTIONS:
#
bce_only  {yes,no}[no]       # Only remove blocked clauses but do not resolve variables.
bve_BCElim  {yes,no}[yes]       # Eliminate Blocked Clauses
bve_totalG  {yes,no}[no]       # Keep track of total size of formula when allowing increasing eliminations
bve_unlimited  {yes,no}[no]       # perform bve test for Var v, if there are more than 10 + 10 or 15 + 5 Clauses containing v
bve_strength  {yes,no}[yes]       # do strengthening during bve
bve_force_gates  {yes,no}[no]       # Force gate search (slower, but probably more eliminations and blockeds are found)
bve_gates  {yes,no}[yes]       # try to find variable AND gate definition before elimination

cp3_bve_resolve_learnts  {0,2}[0]       # Resolve learnt clauses: 0: off, 1: original with learnts, 2: 1 and learnts with learnts
cp3_bve_learnt_growth  {0,1000,10000}[0]       # Keep C (x) D, where C or D is learnt, if |C (x) D| <= max(|C|,|D|) + N
cp3_bve_limit  {2500000,25000000,50000000}[25000000]       # perform at most this many clause derefferences
bve_red_lits  {0,1}[0]       # 0=reduce number of literals, 1=reduce number of clauses,2=reduce any of the two,3 reduce both
cp3_bve_heap  {0,1,2,8,10}[0]       # 0: minimum heap, 1: maximum heap, 2: random, 3: ratio pos/neg smaller+less, 4: ratio pos/neg smaller+greater, 5: ratio pos/neg greater+less, 6: ratio pos/neg greater + greater, 7-10: same as 3-6, but inverse measure order
bve_cgrow     {-1,0,10,20}[0]       # number of additional clauses per elimination
bve_cgrow_t   {0,1000,10000}[0]       # total number of additional clauses
bve_heap_updates  {1,2}[2]       # Always update variable heap if clauses / literals are added or removed, 2 add variables, if not in heap
cp3_bve_inpInc  {50000,500000,5000000}[5000000]       # increase for steps per inprocess call

#
#  COPROCESSOR 3 - CCE OPTIONS:
#
cp3_cce_inpInc  {600,6000,60000}[60000]       # increase for steps per inprocess call
cp3_cce_sizeP  {40,80,99}[40]       # percent of max. clause size for clause elimination (excluding)
cp3_cce_level  {1,2,3}[3]       # none, ALA+ATE, CLA+ATE, ALA+CLA+BCE
cp3_cce_steps  {100000,2000000,3000000}[2000000]       # Number of steps that are allowed per iteration

#
#  COPROCESSOR 3 - EQUIVALENCE ELIMINATION OPTIONS:
#
cp3_eagerGates  {yes,no}[yes]       # do handle gates eagerly
ee_sub  {yes,no}[no]       # do subsumption/strengthening during applying equivalent literals?
ee_reset  {yes,no}[no]       # after Subs or Up, do full reset?
cp3_ee_it  {yes,no}[no]       # use the iterative BIG-EE algorithm
cp3_ee_subNew  {yes,no}[no]       # check for new subsumptions immediately when adding new clauses
cp3_ee_glimit  {1000,10000,100000,1000000}[100000]       # step limit for structural hashing
cp3_ee_cIter  {-1,1,2,3}[2]       # max. EE iterations for circuit (-1 == inf)
cp3_ee_level  {0,2}[0]       # EE on BIG, gate probing, structural hashing
cp3_ee_limit  {100000,1000000,2000000}[1000000]       # step limit for detecting equivalent literals
cp3_ee_inpInc  {2000,20000,200000}[200000]       # increase for steps per inprocess call
cp3_ee_bIter   {1,5,10,400000000}[400000000]       # max. iteration to perform EE search on BIG

#
#  COPROCESSOR 3 - EQUIVALENCE ELIMINATION - HASHING OPTIONS:
#
cp3_extAND  {yes,no}[yes]       # extract AND gates
cp3_extITE  {yes,no}[no]       # extract ITE gates
cp3_extXOR  {yes,no}[no]       # extract XOR gates
cp3_extExO  {yes,no}[no]       # extract ExO gates
cp3_genAND  {yes,no}[no]       # extract generic AND gates
cp3_extHASUM  {yes,no}[no]       # extract full adder sum bit gates
cp3_extNgtInput  {yes,no}[yes]       # extract gates, where inputs come from the same variable
cp3_extImplied  {yes,no}[yes]       # do search binary clause also in BIG with dfs

#
#  COPROCESSOR 3 - FOURIERMOTZKIN OPTIONS:
#
cp3_fm_1st  {yes,no}[no]       # extract first AMO candidate, or last AMO candidate
cp3_fm_newSub  {yes,no}[yes]       # check whether new ALO and ALK subsume other clauses (only if newALO or newALK)
card_noUnits  {yes,no}[no]       # assume there are no unit clauses inside the formula (otherwise, more expensive)
cp3_fm_keepM  {yes,no}[yes]       # keep all new AMOs (also rejected ones)
cp3_fm_amt  {yes,no}[yes]       # extract at-most-two
cp3_fm_twoPr  {yes,no}[yes]       # extract AMO using two product structures
cp3_fm_vMulAMT  {yes,no}[no]       # try to find multiple AMTs per variable
cp3_fm_cut  {yes,no}[yes]       # avoid eliminating too expensive variables (>10,10 or >5,15)
cp3_fm_vMulAMO  {yes,no}[yes]       # try to find multiple AMOs per variable
cp3_fm_dups  {yes,no}[yes]       # avoid finding the same AMO multiple times
cp3_fm_merge  {yes,no}[yes]       # perform AMO merge
cp3_fm_unit  {yes,no}[yes]       # check for units first
cp3_fm_sem  {yes,no}[yes]       # extract Card constraints using UP

card_max  {2,12,20,32,50}[12]       # max card size that will be looked for
cp3_fm_newAlo  {0,1,2}[2]       # create clauses from deduced ALO constraints 0=no,1=from kept,2=keep all 
cp3_fm_newAlk  {0,1,2}[2]       # create clauses from deduced ALK constraints 0=no,1=from kept,2=keep all (possibly redundant!)
card_minC  {3,4,5,6}[3]       # min clause size to find cards
card_maxC  {2,5,6,7}[6]       # max clause size to find cards
cp3_fm_growT  {0,1000,100000}[100000]       # total grow of number of constraints
cp3_fm_newAmo  {0,2}[2]       # encode the newly produced AMOs (with pairwise encoding) 0=no,1=yes,2=try to avoid redundant clauses
cp3_fm_maxConstraints  {0,100000,200000}[200000]       # number of constraints that are allows
cp3_fm_maxA  {3,50,200}[200]       # largest AMO that will be found during search
cp3_fm_grow  {0,5,40,100}[40]       # max. grow of number of constraints per step
cp3_fm_Slimit  {0,6000000,12000000}[12000000]       # number of steps allowed for searching AMOs for FM
cp3_fm_limit  {0,6000000,12000000}[6000000]       # number of steps allowed for FM
card_Elimit  {0,600000,1200000,2400000}[1200000]       # number of steps allowed for searching AMOs semantically

#
#  COPROCESSOR 3 - HTE OPTIONS:
#
cp3_hte_inpInc  {0,60000,120000}[60000]       # increase for steps per inprocess call
cp3_hte_steps  {120000,1200000,2400000,2147483647}[2147483647]       # Number of steps that are allowed per iteration

#
#  COPROCESSOR 3 - PROBING OPTIONS:
#
pr-EE  {yes,no}[yes]       # run equivalent literal detection
pr-vivi  {yes,no}[yes]       # perform clause vivification
pr-repeat  {yes,no}[no]       # repeat probing if changes have been applied
pr-roots  {yes,no}[yes]       # probe only on root literals
pr-probe  {yes,no}[yes]       # perform probing
pr-double  {yes,no}[yes]       # perform double look-ahead
pr-bins  {yes,no}[no]       # use binary clauses for probing
pr-lhbr  {yes,no}[no]       # perform LHBR during probing

pr-keepLHBR  {0,1}[0]       # keep clauses that have been created during LHBR during probing/vivification (0=no,1=learnt)
cp3_viv_inpInc  {10000,100000,1000000}[1000000]       # increase for steps per inprocess call
cp3_pr_inpInc  {10000,100000,1000000}[1000000]       # increase for steps per inprocess call
pr-viviL      {500000,5000000,7500000}[5000000]       # step limit for clause vivification
pr-viviP      {40,60,80}[80]       # percent of max. clause size for clause vivification
pr-keepI  {0,2}[2]       # keep clauses that imply on level 1 (0=no,1=learnt,2=original)
pr-keepL  {0,2}[2]       # keep conflict clauses in solver (0=no,1=learnt,2=original)
pr-nce        {yes,no}[yes]       # keep necessary assignments for level 2 as binary clauses
pr-uips       {-1,0,1}[-1]       # perform learning if a conflict occurs up to x-th UIP (-1 = all )
pr-csize      {2,3,4,2147483647}[2147483647]       # size of clauses that are considered for probing/vivification (propagation)
pr-probeL     {500000,5000000,7500000}[5000000]       # step limit for probing

#
#  COPROCESSOR 3 - RAT Elimination OPTIONS:
#
rat-compl  {yes,no}[yes]       # sort according to nr. of complements
rate-min  {2,3,5}[3]       # minimal clause size for RAT elimination
rate-limit  {0,900000000,9000000000,18000000000}[9000000000]       # number of pairwise clause comparisons before interrupting RATE

#
#  COPROCESSOR 3 - RES OPTIONS:
#
cp3_res_bin  {yes,no}[no]       # resolve with binary clauses
cp3_res_eagerSub  {yes,no}[yes]       # perform eager subsumption
cp3_res_percent  {0.005,0.01}[0.01]       # produce this percent many new clauses out of the total   

cp3_res_inpInc  {2000,20000,200000}[200000]       # increase for steps per inprocess call
cp3_res3_ncls  {10000,100000,1000000}[100000]       # Max. Number of newly created clauses
cp3_res3_steps  {100000,1000000,2000000}[1000000]       # Number of resolution-attempts that are allowed per iteration

#
#  COPROCESSOR 3 - SLS OPTIONS:
#
sls-adopt-cls  {yes,no}[no]       # reduce nr of flips for large instances
sls-ksat-flips  {-1,2000,20000000,2000000000}[20000000]       # how many flips should be performed, if k-sat is detected (-1 = infinite)
sls-rnd-walk  {500,2000,4000}[2000]       # probability of random walk (0-10000)

#
#  COPROCESSOR 3 - SUBSUMPTION OPTIONS:
#
cp3_inpPrefL  {yes,no}[yes]       # During inprocessing, check learned clauses first!
cp3_strength  {yes,no}[yes]       # Perform clause strengthening

cp3_sub_inpInc  {4000000,40000000,60000000}[40000000]       # increase for steps per inprocess call
cp3_call_inc  {50,200,800}[200]       # max. limit increase per process call (subsimp is frequently called from other techniques)
cp3_str_limit  {300000,3000000,300000000,400000000}[300000000]       # limit of strengthening steps
cp3_sub_limit  {300000,3000000,300000000,400000000}[300000000]       # limit of subsumption steps
all_strength_res  {0,3,4,5}[0]       # Create all self-subsuming resolvents of clauses less equal given size (prob. slow & blowup, only seq)

#
#  COPROCESSOR 3 - SYMMETRY OPTIONS:
#
sym-prop  {yes,no}[no]       # try to generate symmetry breaking clauses with propagation
sym-propF  {yes,no}[no]       # generate full clauses
sym-propA  {yes,no}[no]       # test all four casese instead of two
sym-clLearn  {yes,no}[no]       # clean the learned clauses that have been created during symmetry search
sym-unit  {yes,no}[no]       # ignore unit clauses
sym-pol  {yes,no}[no]       # consider the polarity of the occurrences
sym-size  {yes,no}[no]       # scale with the size of the clause

sym-ratio  {0.1,0.3,0.4,0.8}[0.4]       # only consider a variable if it appears close to the average of variable occurrences   

sym-cons  {0,10,100}[0]       # number of conflicts for looking for being implied
sym-consT  {1000,10000,100000}[1000]       # number of total conflicts for looking for being implied
sym-iter  {0,1,2,3}[3]       # number of symmetry approximation iterations
sym-min  {1,2,4}[2]       # minimum symmtry to be exploited

#
#  COPROCESSOR 3 - UNHIDE OPTIONS:
#
cp3_uhdUHTE  {yes,no}[yes]       # Use Unhiding+Hidden Tautology Elimination
cp3_uhdNoShuffle  {yes,no}[no]       # Do not perform randomized graph traversation
cp3_uhdTrans  {yes,no}[no]       # Use Transitive Graph Reduction (buggy)
cp3_uhdEE  {yes,no}[no]       # Use equivalent literal elimination (buggy)
cp3_uhdPrEE  {yes,no}[no]       # Find Equivalences during uhd probing (requ. uhdProbe > 1)
cp3_uhdPrSiBo  {yes,no}[yes]       # Check larger clauses only in first and last iteration

cp3_uhdProbe  {0,2,3,4}[0]       # Approximate probing (bin cls) with stamp info (off,constant,linear,quadratic,exponential)
cp3_uhdPrSize  {2,4,8}[2]       # Enable unhide probing for larger clauses, size <= given parameter
cp3_uhdUHLE  {0,1,2,3}[3]       # Use Unhiding+Hidden Literal Elimination
cp3_uhdIters  {0,3,5,8}[3]       # Number of iterations for unhiding

#
#  COPROCESSOR 3 - XOR OPTIONS:
#
xorFindSubs  {yes,no}[yes]       # try to recover XORs that are partially subsumed
xorKeepUsed  {yes,no}[yes]       # continue to simplify kept xors
xorFindRes  {yes,no}[no]       # try to recover XORs including resolution steps

xorSelect  {0,1}[0]       # how to select next xor 0=first,1=smallest
xorLimit  {120000,1200000,12000000}[12000000]       # number of checks for finding xors
xorMaxSize  {6,12,15}[12]       # Maximum Clause Size for detecting XOrs (high number consume much memory!)

#
#
#   SSS  EEEE  AA  RRRR   CCC H  H 
#  S     E    A  A R   R C    H  H 
#   SSS  EEE  AAAA RRRR  C    HHHH 
#      S E    A  A R R   C    H  H 
#  SSSS  EEEE A  A R  RR  CCC H  H
#
#

#
#  CORE OPTIONS:
#

rmf  {yes,no}[no]       # use fast remove
rnd-init  {yes,no}[no]       # Randomize the initial activity
biAsserting  {yes,no}[no]       # Learn bi-asserting clauses, if possible (do not learn asserting clause!)
biAsFreq  {0,2,8,16}[0]       # The min nr. of clauses between two learned bi-asserting clauses


rinc  {1.5,2,3,4}[2]       # Restart interval increase factor
rnd-freq  {0,0.005, 0.5}[0]       # The frequency with which the decision heuristic tries to choose a random variable   
cla-decay  {0.999,0.995,0.5}[0.999]       # The clause activity decay factor
var-decay-i  {0.001,0.01,0.99}[0.01]       # The variable activity decay factor increase   
var-decay-e  {0.6,0.75,0.85,0.95,0.99}[0.95]       # The variable activity decay factor stop value  
var-decay-b  {0.6,0.75,0.85,0.95,0.99}[0.95]       # The variable activity decay factor start value 
var-decay-d  {5000,10000,15000}[5000]                      # Nr. of conflicts for activity decay increase

rfirst  {1,5,10,32,100,1000}[100]       # The base restart interval
rtype  {0,1,2}[0]       # Choose type of restart (0=dynamic,1=luby,2=geometric)

rlevel  {0,1,2}[0]       # Choose to which level to jump to: 0=0, 1=ReusedTrail, 2=recursive reused trail
phase-saving  {0,1,2}[2]       # Controls the level of phase saving (0=none, 1=limited, 2=full)
ccmin-mode  {0,1,2}[2]       # Controls conflict clause minimization (0=none, 1=basic, 2=deep)

#
#  CORE -- MINIMIZE OPTIONS:
#
minLBDMinimizingClause  {3,6,9}[6]       # The min LBD required to minimize clause
minSizeMinimizingClause  {3,15,30,50}[30]       # The min size required to minimize clause
#
#  CORE -- REDUCE OPTIONS:
#
quickRed  {yes,no}[no]       # check only first two literals for being satisfied
incLBD  {yes,no}[no]       # allow to increment lbd of clauses dynamically
lbdIgnL0  {yes,no}[no]       # ignore top level literals for LBD calculation

keepWorst  {0.0,0.001,0.01,0.05,0.1,0.2,1.0}[0.0]       # keep this (relative to all learned) number of worst learned clauses during removal   

firstReduceDB  {2000,4000,8000,16000}[4000]       # The number of conflicts before the first reduce DB
incReduceDB   {200,300,450}[300]       # Increment for reduce DB
specialIncReduceDB  {900,1000,1100}[1000]       # Special increment for reduce DB
minLBDFrozenClause  {15,30,50}[30]       # Protect clauses if their LBD decrease and is lower than (for one turn)
lbdupd  {0,1,2}[1]       # update LBD during (0=propagation,1=learning,2=never),
#
#  CORE -- RESTART OPTIONS:
#
R  {1.2,1.4,1.6,2.0}[1.4]       # The constant used to block restart  TODO!
K  {0.5,0.7,0.8,0.95}[0.8]       # The constant used to force restart  TODO!

szTrailQueue  {4000,5000,6000}[5000]       # The size of moving average for trail (block restarts)
szLBDQueue    {30,50,70}[50]       # The size of moving average for LBD (restarts)

#
#  EXTENDED RESOLUTION RER OPTIONS:
#
rer  {yes,no}[no]          # perform restricted extended resolution (along Audemard ea 2010)
rer-l  {yes,no}[yes]       # store extensions as learned clauses
rer-f  {yes,no}[yes]       # add full rer extension?

rer-freq  {0.1,0.5,1.0}[1.0]       # how often rer compared to usual learning   

rer-r  {0,1,2}[0]       # replace all disjunctions of the RER extension (only, if not added as learned, and if full - RER adds a conjunction, optionListPtr ), 0=no,1=formula,2=formula+learned
rer-rn {no,yes}[no]			# rewrite new learned clauses
rer-window  {2,3}[2]       # number of clauses to collect before fuse
rer-maxLBD  {1,6,15,30,2147483647}[2147483647]       # maximum LBD to perform rer
rer-minLBD  {1,6,15,30}[1]       # minimum LBD to perform rer
rer-max-size  {2,15,30,2147483647}[2147483647]       # maximum size of learned clause to perform rer
rer-min-size  {2,6,15,30}[2]       # minimum size of learned clause to perform rer
rer-new-act  {0,1,2,3,4}[0]       # how to set the new activity: 0=avg, 1=max, 2=min, 3=sum, 4=geo-mean

er-size     {8,16,30,64}[30] # size of a clause so that it is checked for being rewritten
er-lbd      {6,12,18}[6]		 # lbd  of a clause so that it is checked for being rewritten

#
#  INIT OPTIONS:
#
polMode  {yes,no}[no]       # invert provided polarities
actDec  {1.052632,1.1,2}[1.052632]       # decrease per element (sub, or divide)  TODO!
actStart  {1024.0,2048.0}[1024.0]       # highest value for first variable  TODO!

actIncMode  {0,1,2,3}[0]       # how to inc 0=lin, 1=geo,2=reverse-lin,3=reverse-geo
init-act  {0,1,2,3,4,5,6}[0]       # initialize activities (0=none,1=inc-lin,2=inc-geo,3=dec-lin,4=dec-geo,5=rnd,6=abs(jw))
init-pol  {0,1,2,3,4,5}[0]       # initialize polarity (0=none,1=JW-pol,2=JW-neg,3=MOMS,4=MOMS-neg,5=rnd)

#
#  INTERLEAVED CLAUSE STRENGTHENING OPTIONS:
#
ics  {yes,no}[no]       # perform interleaved clause strengthening (along Wieringa ea 2013)
ics_keepNew  {yes,no}[no]       # keep the learned clauses that have been produced during the ICS
ics_dyn  {yes,no}[no]       # update variable/clause activities during ICS
ics_shrinkNew  {yes,no}[no]       # shrink the kept learned clauses in the very same run?! (makes only sense if the other clauses are kept!)

ics_relLBD  {0.01,0.5,1.0,1.2}[1.0]       # only look at a clause if its LBD is less than this percent of the average of the clauses that are looked at, 1=100%   
ics_relSIZE  {0.01,0.5,1.0,1.2}[1.0]       # only look at a clause if its size is less than this percent of the average size of the clauses that are looked at, 1=100%   

ics_processLast  {5050,10000,20000,50000}[5050]       # process this number of learned clauses (analyse, reject if quality too bad!)
ics_window  {5050,10000,40000,80000,200000}[5050]       # run ICS after another N conflicts

#
#  MODS OPTIONS:
#
otfssL  {yes,no}[no]       # otfss for learnt clauses
otfss  {yes,no}[no]       # perform otfss during conflict analysis

laHack  {yes,no}[no]       # enable lookahead on level 0
tabu  {yes,no}[yes]       # do not perform LA, if all considered LA variables are as before
dyn  {yes,no}[no]       # dynamically set the frequency based on success
laEEl  {yes,no}[no]       # add EE clauses as learnt clauses
agil-r  {yes,no}[no]       # reject restarts based on agility
updLearnAct  {yes,no}[yes]       # UPDATEVARACTIVITY trick (see glucose competition'09 companion paper)
lhbr-sub  {yes,no}[no]       # check whether new clause subsumes the old clause
dontTrust  {yes,no}[no]       # change decision literal polarity once in a while

agil-decay  {0.99,0.9999}[0.9999]       # search agility decay   
agil-init  {0.01,0.11}[0.11]       # initial agility   
agil-limit  {0.22,0.33,0.44}[0.22]       # agility above this limit rejects restarts   
vsids-s  {0.9,1.0}[1.0]       # interpolate between VSIDS and VMTF,start value   
vsids-e  {0.9,1.0}[1.0]       # interpolate between VSIDS and VMTF, end value   
vsids-i  {0.0001,0.001,1.0}[1.0]       # interpolate between VSIDS and VMTF, inc during update   
vsids-d  {1000,5000,20000,2147483647}[2147483647]       # interpolate between VSIDS and VMTF, numer of conflits until next update

rMaxInc  {1.05,1.1,1.2}[1.1]       # increase of the max. restart interval per restart  TODO!

sInterval  {0,1,2,3}[0]           # how often to perform simplifications on level 0
otfssMLDB  {2,16,30,64}[30]       # max. LBD of learnt clauses that are candidates for otfss
learnDecP  {-1,50,66,80,100}[-1]       # if LBD of is > percent of decisionlevel, learn decision Clause (Knuth)
hlaLevel  {1,5}[5]       # level of look ahead
hlaMax  {25,50,75,256,1000}[50]       # maximum bound for frequency
laEEp  {0,50,66,100}[0]       # add EE clauses, if less than p percent tests failed
rMax  {-1,5,32,128,1024}[-1]       # initial max. interval between two restarts (-1 = off)
hlaevery  {0,1,8,32}[1]       # initial frequency of LA
lhbr-max  {0,1024,4096,16000,2147483647}[2147483647]       # max nr of newly created lhbr clauses
lhbr  {0,3,4}[0]       # use lhbr (0=no,1=str,2=trans,str,3=new,4=trans,new)
clsActB  {0,1,2}[0]       # bump activity of a clause (0 as usual, 1 relativ to cls size, 2 relative to LBD)
varActB  {0,1,2}[0]       # bump activity of a variable (0 as usual, 1 relativ to cls size, 2 relative to LBD)
alluiphack  {0,2}[0]       # learn all unit UIPs at any level
agil-add  {1,32,128,512}[128]       # number of conflicts until the next restart is allowed (for static schedules)
hlabound  {-1,4096,16000}[4096]       # max. nr of LAs (-1 == inf)
hlaTop  {-1,512}[-1]       # allow another LA after learning another nr of top level units (-1 = never)

#
#  REASON OPTIONS:
#
longConflict  {yes,no}[no]       # if a binary conflict is found, check for a longer one!
hack-cost  {yes,no}[yes]       # use size cost
hack  {0,1,2,3}[0]       # use hack modifications

#
#  SEARCH UNHIDE PROBING OPTIONS:
#
sUhdPrRb  {yes,no}[yes]       # rebuild BIG before cleaning the formula
sUhdProbe  {0,1,2,3}[0]       # perform probing based on learned clauses (off,linear,quadratic,larger)
sUhdPrSh  {0,2,4,8}[0]        # travers the BIG again during every i-th restart 0=off
sUHLEsize {0,8,30,64}[0]      # perform UHLE with the learnt clause, if a smaller or equal size is present
sUHLElbd  {0,2,6,12}[0]       # perform UHLE with the learnt clause, if current LBD is less equal

  
#
#   CCCCC   OOOOO  NN   NN DDDDD   IIIII TTTTTTT IIIII  OOOOO  NN   NN   AAA   LL       SSSSS  
#  CC    C OO   OO NNN  NN DD  DD   III    TTT    III  OO   OO NNN  NN  AAAAA  LL      SS      
#  CC      OO   OO NN N NN DD   DD  III    TTT    III  OO   OO NN N NN AA   AA LL       SSSSS  
#  CC    C OO   OO NN  NNN DD   DD  III    TTT    III  OO   OO NN  NNN AAAAAAA LL           SS 
#   CCCCC   OOOO0  NN   NN DDDDDD  IIIII   TTT   IIIII  OOOO0  NN   NN AA   AA LLLLLLL  SSSSS  
#

#
#
#   SSS  EEEE  AA  RRRR   CCC H  H 
#  S     E    A  A R   R C    H  H 
#   SSS  EEE  AAAA RRRR  C    HHHH 
#      S E    A  A R R   C    H  H 
#  SSSS  EEEE A  A R  RR  CCC H  H
#
#

K            | rtype in   {0}                  # only if dynamic restarts are scheduled
R            | rtype in   {0}                  # only if dynamic restarts are scheduled
szLBDQueue   | rtype in   {0}                  # only if dynamic restarts are scheduled
szTrailQueue | rtype in   {0}                  # only if dynamic restarts are scheduled

rfirst    | rtype in   {1,2}                   # only if static restarts are scheduled
rinc      | rtype in   {2}                     # only if static restarts are scheduled with the geometric series

tabu      | laHack in   {yes}                  # only if LA is used
dyn       | laHack in   {yes}                  # only if LA is used
hlaMax    | laHack in   {yes}                  # only if LA and DYN is used
hlaLevel  | laHack in   {yes}                  # only if LA is used
hlaevery  | laHack in   {yes}                  # only if LA is used
hlabound  | laHack in   {yes}                  # only if LA is used
hlaTop    | laHack in   {yes}                  # only if LA is used
laEEp     | laHack in   {yes}                  # only if LA is used

rMax      | rtype in   {0}                     # only if dynamic restarts are scheduled
rMaxInc   | rMax in   {5,32,128,1024}       # only if dynamic restarts are altered

hack-cost | hack in   {1}                      # only if reason updates are used

otfssL    | otfss in   {yes}
otfssMLDB | otfss in   {yes}

lhbr-max | lhbr in   {3,4}
lhbr-sub | lhbr in   {3,4}

sUhdPrRb  | sUhdProbe in   {1,2,3}
sUhdPrSh  | sUhdProbe in   {1,2,3}
sUHLElbd  | sUHLEsize in   {8,30,64}

biAsFreq  | biAsserting  in   {yes}

agil-decay  | agil-r in   {yes}
agil-init   | agil-r in   {yes}
agil-limit  | agil-r in   {yes} 
agil-add  	| agil-r in   {yes}

ics_keepNew       | ics in   {yes} 
ics_dyn           | ics in   {yes} 
ics_shrinkNew     | ics in   {yes} 
ics_relLBD        | ics in   {yes} 
ics_relSIZE       | ics in   {yes} 
ics_processLast   | ics in   {yes} 
ics_window        | ics in   {yes} 

rer-l         | rer in   {yes}
rer-f         | rer in   {yes}
rer-freq      | rer in   {yes}
rer-r         | rer in   {yes}
rer-rn        | rer-l in {no}
rer-rn        | rer-f in {yes}
rer-rn        | rer-window in {2}
rer-window    | rer in   {yes}
rer-maxLBD    | rer in   {yes}
rer-minLBD    | rer in   {yes}
rer-max-size  | rer in   {yes}
rer-min-size  | rer in   {yes}
rer-new-act   | rer in   {yes}


#
#
#    SSS  III M   M PPPP  L    III FFFF III  CCC  AA  TTTTTT III  OOO  N   N 
#   S      I  MM MM P   P L     I  F     I  C    A  A   TT    I  O   O NN  N 
#    SSS   I  M M M PPPP  L     I  FFF   I  C    AAAA   TT    I  O   O N N N 
#       S  I  M   M P     L     I  F     I  C    A  A   TT    I  O   O N  NN 
#   SSSS  III M   M P     LLLL III F    III  CCC A  A   TT   III  OOO  N   N 
#
#

inprocess      | enabled_cp3 in   {yes}
cp3_randomized | enabled_cp3 in   {yes}
cp3_limited    | enabled_cp3 in   {yes}
cp3_inp_cons   | enabled_cp3 in   {yes}
cp3_iters      | enabled_cp3 in   {yes}
cp3_vars       | enabled_cp3 in   {yes}
cp3_cls        | enabled_cp3 in   {yes}
inc-inp        | inprocess in   {yes}
randInp        | inprocess in   {yes}
cp3_ipvars     | inprocess in   {yes}
cp3_ipcls      | inprocess in   {yes}

#
#  PREPROCESSOR TECHNIQUES OPTIONS:
#
ee    | enabled_cp3 in   {yes}
rate    | enabled_cp3 in   {yes}
cce    | enabled_cp3 in   {yes}
bce    | enabled_cp3 in   {yes}
hte    | enabled_cp3 in   {yes}
subsimp    | enabled_cp3 in   {yes}
up    | enabled_cp3 in   {yes}
sls    | enabled_cp3 in   {yes}
xor    | enabled_cp3 in   {yes}
fm     | enabled_cp3 in   {yes}
symm     | enabled_cp3 in   {yes}
dense     | enabled_cp3 in   {yes}
3resolve     | enabled_cp3 in   {yes}
probe     | enabled_cp3 in   {yes}
unhide     | enabled_cp3 in   {yes}
bva     | enabled_cp3 in   {yes}
bve     | enabled_cp3 in   {yes}

sls-flips | sls in   {yes} 

cp3_ptechs     | enabled_cp3 in   {yes}
cp3_itechs     | inprocess in   {yes}

cp3_ee_vars    | ee in   {yes}
cp3_ee_cls     | ee in   {yes}
cp3_bve_vars   | bve in   {yes} 
cp3_bve_cls    | bve in   {yes} 
cp3_bva_vars   | bva in   {yes} 
cp3_bva_cls    | bva in   {yes} 
cp3_Ibva_vars   | cp3_Ibva in   {2} 
cp3_Ibva_cls    | cp3_Ibva in   {2} 
cp3_Xbva_vars   | cp3_Xbva in   {2} 
cp3_Xbva_cls    | cp3_Xbva in   {2} 
cp3_unhide_vars | unhide in   {yes}
cp3_unhide_cls | unhide in   {yes} 
cp3_probe_vars | probe in   {yes} 
cp3_probe_cls  | probe in   {yes}
cp3_viv_vars   | pr-vivi in   {yes} 
cp3_viv_cls    | pr-vivi in   {yes}
cp3_tRes_vars  | 3resolve in   {yes}
cp3_tRes_cls   | 3resolve in   {yes}
cp3_symm_vars  | symm in   {yes}
cp3_symm_cls   | symm in   {yes}
cp3_xor_cls    | xor in   {yes}
cp3_xor_vars   | xor in   {yes}
cp3_fm_cls     | fm in   {yes}
cp3_fm_vars    | fm in   {yes}
cp3_susi_vars  | subsimp in   {yes}
cp3_susi_cls   | subsimp in   {yes}
cp3_hte_vars   | hte in    {yes}
cp3_hte_cls    | hte in    {yes}
cp3_bce_vars   | bce in    {yes}
cp3_bce_cls    | bce in    {yes}
cp3_cce_vars   | cce in    {yes}
cp3_cce_cls    | cce in    {yes}
cp3_rate_vars  | rate in   {yes}
cp3_rate_cls   | rate in   {yes}
cp3_sls_vars   | sls in    {yes}
cp3_sls_cls    | sls in    {yes}
cp3_susi_lits   | subsimp in {yes}
cp3_hte_lits    | hte in   {yes}
cp3_bce_lits    | bce in   {yes}
cp3_cce_lits    | cce in   {yes}
cp3_rate_lits   | rate in  {yes}
cp3_ee_lits     | ee in    {yes}
cp3_bve_lits    | bve in   {yes}
cp3_bva_lits    | bva in   {yes} 
cp3_Ibva_lits   | cp3_Ibva in {2} 
cp3_Xbva_lits   | cp3_Xbva in {2} 
cp3_unhide_lits | unhide in   {yes} 
cp3_probe_lits  | probe in    {yes} 
cp3_viv_lits    | pr-vivi in  {yes} 
cp3_tRes_lits   | 3resolve in {yes}
cp3_symm_lits   | symm in {yes}
cp3_fm_lits     | fm in   {yes}
cp3_xor_lits    | xor in  {yes}
cp3_sls_lits    | sls in  {yes}



#
#  COPROCESSOR 3 - BCE OPTIONS:
#
bce-compl| bce in   {yes}
bce-bin  | bce in   {yes}
bce-bce  | bce in   {yes}
bce-cle  | bce in   {yes}
bce-cla  | bce in   {yes}
bce-cle-cons | bce in   {yes}
bce-limit | bce in   {yes}
bce-incInp | inprocess in   {yes}
bce-incInp | bce in   {yes}

#
#  COPROCESSOR 3 - BVA OPTIONS:
# 
cp3_Abva       | bva in   {yes}
cp3_bva_subOr  | bva in   {yes}
cp3_bva_incInp | bva in   {yes}
cp3_bva_incInp | inprocess in   {yes}
cp3_bva_limit  | cp3_Abva in   {yes}
cp3_bva_Vlimit | bva in   {yes}
cp3_Xbva       | bva in   {yes}
cp3_Ibva       | bva in   {yes}
cp3_bva_Xlimit | cp3_Xbva in {2}
cp3_bva_Ilimit | cp3_Ibva in {2}


#
#  COPROCESSOR 3 - BVE OPTIONS:
#
bce_only     | bve in {yes} 
bve_BCElim     | bve in {yes} 
bve_totalG      | bve in {yes} 
bve_unlimited     | bve in {yes} 
bve_strength     | bve in {yes} 
bve_gates    | bve in {yes} 
bve_force_gates     | bve_gates in {yes} 


cp3_bve_resolve_learnts    | bve in {yes} 
cp3_bve_learnt_growth      | bve in {yes} 
cp3_bve_limit    | bve in {yes} 
cp3_bve_limit    | cp3_limited in {yes}
bve_red_lits     | bve in {yes} 
cp3_bve_heap     | bve in {yes}
bve_cgrow        | bve in {yes} 
bve_cgrow_t      | bve in {yes} 
bve_heap_updates | bve in {yes} 
cp3_bve_inpInc   | bve in {yes} 
cp3_bve_inpInc   | inprocess in {yes} 

#
#  COPROCESSOR 3 - CCE OPTIONS:
#
cp3_cce_sizeP   | cce in {yes}
cp3_cce_level   | cce in {yes}
cp3_cce_steps   | cce in {yes}
cp3_cce_inpInc  | cce in {yes}
cp3_cce_inpInc  | inprocess in {yes}

#
#  COPROCESSOR 3 - EQUIVALENCE ELIMINATION OPTIONS:
#
ee_sub             | ee in {yes}
ee_reset           | ee in {yes}
cp3_ee_it          | ee in {yes}
cp3_ee_subNew      | ee in {yes}
cp3_ee_level       | ee in {yes}
cp3_ee_limit       | ee in {yes}
cp3_ee_limit       | cp3_limited in {yes}
cp3_ee_bIter       | ee in {yes}
cp3_ee_inpInc      | ee in {yes}
cp3_ee_inpInc      | inprocess in {yes}
cp3_eagerGates     | cp3_ee_level in {2}
cp3_ee_glimit      | cp3_ee_level in {2}
cp3_ee_glimit      | cp3_limited in {yes}
cp3_ee_cIter       | cp3_ee_level in {2}

#
#  COPROCESSOR 3 - EQUIVALENCE ELIMINATION - HASHING OPTIONS:
#
cp3_extAND  | cp3_ee_level in {2}
cp3_extITE  | cp3_ee_level in {2}
cp3_extXOR  | cp3_ee_level in {2}
cp3_extExO  | cp3_ee_level in {2}
cp3_genAND  | cp3_ee_level in {2}
cp3_extHASUM     | cp3_ee_level in {2}
cp3_extNgtInput  | cp3_ee_level in {2}
cp3_extImplied   | cp3_ee_level in {2}

#
#  COPROCESSOR 3 - FOURIERMOTZKIN OPTIONS:
#
cp3_fm_1st     | fm in {yes} 
cp3_fm_newSub  | fm in {yes} 
cp3_fm_keepM   | fm in {yes} 
cp3_fm_amt     | fm in {yes} 
cp3_fm_twoPr   | fm in {yes} 
cp3_fm_vMulAMT | cp3_fm_amt in {yes} 
cp3_fm_cut     | fm in {yes} 
cp3_fm_vMulAMO | fm in {yes} 
cp3_fm_dups    | fm in {yes} 
cp3_fm_merge   | fm in {yes} 
cp3_fm_unit    | fm in {yes} 
cp3_fm_newAlo  | fm in {yes} 
cp3_fm_newAlk  | fm in {yes} 

cp3_fm_growT   | fm in {yes} 
cp3_fm_newAmo  | fm in {yes} 
cp3_fm_maxConstraints  | fm in {yes} 
cp3_fm_maxA    | fm in {yes} 
cp3_fm_grow    | fm in {yes} 
cp3_fm_Slimit  | fm in {yes} 
cp3_fm_Slimit  | cp3_limited in {yes}
cp3_fm_limit   | fm in {yes} 
cp3_fm_limit   | cp3_limited in {yes}

cp3_fm_sem      | fm in {yes} 
card_noUnits    | cp3_fm_sem in {yes} 
card_max        | cp3_fm_sem in {yes} 
card_minC       | cp3_fm_sem in {yes} 
card_maxC       | cp3_fm_sem in {yes} 
card_Elimit     | cp3_fm_sem in {yes}
card_Elimit     | cp3_limited in {yes} 

#
#  COPROCESSOR 3 - HTE OPTIONS:
#
cp3_hte_steps   | hte in {yes} 
cp3_hte_inpInc  | hte in {yes} 
cp3_hte_inpInc  | inprocess in {yes} 


#
#  COPROCESSOR 3 - PROBING OPTIONS:
#
pr-EE       | probe in {yes}
pr-vivi     | probe in {yes}
pr-probe    | probe in {yes}
pr-bins     | probe in {yes}


pr-csize       | probe in {yes}
pr-keepLHBR    | probe in {yes}
pr-lhbr        | pr-probe in {yes}
pr-double      | pr-probe in {yes}
pr-repeat      | pr-probe in {yes}
pr-roots       | pr-probe in {yes}
pr-keepI       | pr-probe in {yes}
pr-keepL       | pr-probe in {yes}
pr-nce         | pr-probe in {yes}
pr-uips        | pr-probe in {yes}
pr-probeL      | pr-probe in {yes}
cp3_pr_inpInc  | pr-probe in {yes}
cp3_pr_inpInc  | inprocess in {yes}
pr-viviL       | pr-vivi in {yes}
pr-viviP       | pr-vivi in {yes}
cp3_viv_inpInc | pr-vivi in {yes}
cp3_viv_inpInc | inprocess in {yes}


#
#  COPROCESSOR 3 - RAT Elimination OPTIONS:
#
rat-compl  | rate in {yes}
rate-min   | rate in {yes} 
rate-limit | rate in {yes} 
rate-limit | cp3_limited in {yes} 

#
#  COPROCESSOR 3 - RES OPTIONS:
#
cp3_res_bin      | 3resolve in {yes}
cp3_res_eagerSub | 3resolve in {yes}
cp3_res_percent  | 3resolve in {yes}
cp3_res3_ncls    | 3resolve in {yes} 
cp3_res3_steps   | 3resolve in {yes}
cp3_res_inpInc   | 3resolve in {yes}
cp3_res_inpInc   | inprocess in {yes}

#
#  COPROCESSOR 3 - SLS OPTIONS:
#
sls-adopt-cls    | sls in {yes}
sls-ksat-flips   | sls in {yes}
sls-rnd-walk     | sls in {yes}

#
#  COPROCESSOR 3 - SUBSUMPTION OPTIONS:
#
cp3_strength       | subsimp in {yes} 
cp3_call_inc       | subsimp in {yes} 
cp3_str_limit      | cp3_strength in {yes} 
cp3_str_limit      | cp3_limited in {yes} 
cp3_sub_limit      | subsimp in {yes} 
cp3_sub_limit      | cp3_limited in {yes} 
all_strength_res   | cp3_strength in {yes} 
cp3_inpPrefL       | subsimp in {yes} 
cp3_inpPrefL       | inprocess in {yes} 
cp3_sub_inpInc     | subsimp in {yes} 
cp3_sub_inpInc     | inprocess in {yes} 

#
#  COPROCESSOR 3 - SYMMETRY OPTIONS:
#
sym-prop     | symm in {yes}
sym-propF    | sym-prop in {yes}
sym-propA    | sym-prop in {yes}
sym-clLearn  | symm in {yes}
sym-unit     | symm in {yes}
sym-pol      | symm in {yes}
sym-size     | symm in {yes}
sym-ratio    | symm in {yes}
sym-cons     | symm in {yes}
sym-consT    | symm in {yes}
sym-iter     | symm in {yes}
sym-min      | symm in {yes}

#
#  COPROCESSOR 3 - UNHIDE OPTIONS:
#
cp3_uhdUHTE      | unhide in {yes} 
cp3_uhdNoShuffle | unhide in {yes} 
cp3_uhdTrans     | unhide in {yes} 
cp3_uhdEE        | unhide in {yes} 
cp3_uhdUHLE      | unhide in {yes} 
cp3_uhdIters     | unhide in {yes} 
cp3_uhdProbe     | unhide in {yes} 
cp3_uhdPrEE      | cp3_uhdProbe in {2,3,4} 
cp3_uhdPrSiBo    | cp3_uhdProbe in {2,3,4} 
cp3_uhdPrSize    | cp3_uhdProbe in {2,3,4} 

#
#  COPROCESSOR 3 - XOR OPTIONS:
#
xorFindSubs  | xor in {yes} 
xorKeepUsed  | xor in {yes} 
xorFindRes   | xorFindSubs in {yes} 

xorSelect    | xor in {yes} 
xorLimit     | xor in {yes} 
xorLimit     | cp3_limited in {yes} 
xorMaxSize   | xor in {yes} 

#
#  FFFFFFF  OOOOO  RRRRRR  BBBBB   IIIII DDDDD   DDDDD   EEEEEEE NN   NN 
#  FF      OO   OO RR   RR BB   B   III  DD  DD  DD  DD  EE      NNN  NN 
#  FFFF    OO   OO RRRRRR  BBBBBB   III  DD   DD DD   DD EEEEE   NN N NN 
#  FF      OO   OO RR  RR  BB   BB  III  DD   DD DD   DD EE      NN  NNN 
#  FF       OOOO0  RR   RR BBBBBB  IIIII DDDDDD  DDDDDD  EEEEEEE NN   NN 
#

{vsids-s=1.0,vsids-e=0.9} 		               # start should be less than end
{vsids-s=0.9,vsids-e=0.9,vsids-i=0.0001}     # should not tune vsids-i, if start and end are equal
{vsids-s=0.9,vsids-e=0.9,vsids-i=0.001}      #
{vsids-s=0.9,vsids-e=0.9,vsids-d=1000}       #
{vsids-s=0.9,vsids-e=0.9,vsids-d=5000}       #
{vsids-s=0.9,vsids-e=0.9,vsids-d=20000}      #
{vsids-s=0.9,vsids-e=0.9,vsids-d=2147483647} #


{var-decay-b=0.75, var-decay-e=0.6}          # start value should be less equal
{var-decay-b=0.85 , var-decay-e=0.6     }          # start value should be less equal
{var-decay-b=0.85 , var-decay-e=0.75     }          # start value should be less equal
{var-decay-b=0.95     , var-decay-e=0.6  }          # start value should be less equal
{var-decay-b=0.95     , var-decay-e=0.75 }          # start value should be less equal
{var-decay-b=0.95     , var-decay-e=0.85 }          # start value should be less equal
{var-decay-b=0.99 , var-decay-e=0.6  }          # start value should be less equal
{var-decay-b=0.99 , var-decay-e=0.75 }          # start value should be less equal
{var-decay-b=0.99 , var-decay-e=0.85 }          # start value should be less equal
{var-decay-b=0.99 , var-decay-e=0.95 }          # start value should be less equal

{var-decay-b=0.99 , var-decay-e=0.99, var-decay-i=0.001} # do not tune -i if the others are equal!
{var-decay-b=0.95 , var-decay-e=0.95, var-decay-i=0.001}
{var-decay-b=0.85 , var-decay-e=0.85, var-decay-i=0.001}
{var-decay-b=0.75 , var-decay-e=0.75, var-decay-i=0.001}
{var-decay-b=0.6 , var-decay-e=0.6  , var-decay-i=0.001}
{var-decay-b=0.99 , var-decay-e=0.99, var-decay-i=0.99}
{var-decay-b=0.95 , var-decay-e=0.95, var-decay-i=0.99}
{var-decay-b=0.85 , var-decay-e=0.85, var-decay-i=0.99}
{var-decay-b=0.75 , var-decay-e=0.75, var-decay-i=0.99}
{var-decay-b=0.6 , var-decay-e=0.6  , var-decay-i=0.99}

{var-decay-b=0.99 , var-decay-e=0.99, var-decay-d=10000} # do not tune -d if the others are equal!
{var-decay-b=0.95 , var-decay-e=0.95, var-decay-d=10000}
{var-decay-b=0.85 , var-decay-e=0.85, var-decay-d=10000}
{var-decay-b=0.75 , var-decay-e=0.75, var-decay-d=10000}
{var-decay-b=0.6 , var-decay-e=0.6  , var-decay-d=10000}
{var-decay-b=0.99 , var-decay-e=0.99, var-decay-d=15000}
{var-decay-b=0.95 , var-decay-e=0.95, var-decay-d=15000}
{var-decay-b=0.85 , var-decay-e=0.85, var-decay-d=15000}
{var-decay-b=0.75 , var-decay-e=0.75, var-decay-d=15000}
{var-decay-b=0.6 , var-decay-e=0.6  , var-decay-d=15000}

{pr-probe=no,pr-vivi=no,probe=yes} # if probing is enabled, at least probing or vivification have to be used!

{bva=yes,cp3_Abva=no,cp3_Ibva=0,cp3_Xbva=0}   # if bva, than also use at least one bva technique
{bce=yes,bce-bce=no,bce-cle=no,bce-cla=no}    # if bce, then do at least bce, or cle, or cla

{bce_only=yes,bve_BCElim=no}                  # if bve should do only bce, then it should do at least bce

{cp3_ptechs="u3svghpwcv", bve=no}             # no need to repeat bve, if bve is not enabled!
{cp3_itechs="us", subsimp=no }                # no need to run inprocessing without the chosen technique
{cp3_itechs="usv", bve=no}                    # no need to run inprocessing without the chosen technique
{cp3_itechs="usw", bva=no}                    # no need to run inprocessing without the chosen technique
{cp3_itechs="ug", unhide=no}                  # no need to run inprocessing without the chosen technique
{cp3_itechs="up", probe=no}                   # no need to run inprocessing without the chosen technique
{cp3_itechs="ux", xor=no}                     # if selected for inprocessing, have this technique also enabled!
{cp3_itechs="uf", fm=no}                      # if selected for inprocessing, have this technique also enabled!
{cp3_itechs="usxf", xor=no}                   # if selected for inprocessing, have this technique also enabled!
{cp3_itechs="usxf", fm=no}                    # if selected for inprocessing, have this technique also enabled!
{cp3_itechs="ugsxf", xor=no}                  # if selected for inprocessing, have this technique also enabled!
{cp3_itechs="ugsxf", fm=no}                   # if selected for inprocessing, have this technique also enabled!
{cp3_itechs="ugsxf", unhide=no}               # if selected for inprocessing, have this technique also enabled!

#
# Execute to test:
#
#clear && clear && ./configurators/smac-v2.04.01-master-415/smac --numRun 0 --executionMode ROAR --wallClockLimit 100 --doValidation false --abortOnCrash true --scenarioFile ./scenarios/regressiontests-5s-1h.txt --algo "ruby ../scripts/generic_solver_wrapper.rb riss4" --paramfile solvers/riss4/riss4.pcs
#
#
